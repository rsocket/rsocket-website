"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[373],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,d=u["".concat(l,".").concat(m)]||u[m]||g[m]||s;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),i=["components"],o={slug:"/guides/rsocket-py/graphql/mutation",title:"Mutation - GraphQL Integration - rsocket-py",sidebar_label:"Mutation"},l="Mutation",p={unversionedId:"guides/rsocket-py/graphql/mutation",id:"guides/rsocket-py/graphql/mutation",title:"Mutation - GraphQL Integration - rsocket-py",description:"In this section we will add an example for Mutation.",source:"@site/content-docs/guides/rsocket-py/graphql/mutation.mdx",sourceDirName:"guides/rsocket-py/graphql",slug:"/guides/rsocket-py/graphql/mutation",permalink:"/guides/rsocket-py/graphql/mutation",draft:!1,editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/graphql/mutation.mdx",tags:[],version:"current",lastUpdatedBy:"Kevin Viglucci",lastUpdatedAt:1696945868,formattedLastUpdatedAt:"Oct 10, 2023",frontMatter:{slug:"/guides/rsocket-py/graphql/mutation",title:"Mutation - GraphQL Integration - rsocket-py",sidebar_label:"Mutation"},sidebar:"guides",previous:{title:"Introduction",permalink:"/guides/rsocket-py/graphql"},next:{title:"Command Line Interface",permalink:"/guides/rsocket-py/cli"}},c={},u=[{value:"Scheme",id:"scheme",level:2},{value:"Server",id:"server",level:2},{value:"Client",id:"client",level:2}],g={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"mutation"},"Mutation"),(0,s.kt)("p",null,"In this section we will add an example for ",(0,s.kt)("inlineCode",{parentName:"p"},"Mutation"),"."),(0,s.kt)("h2",{id:"scheme"},"Scheme"),(0,s.kt)("p",null,"Update the schema to include a mutation, and a method which will be used to verify the mutation:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n    greeting: Greeting\n    getMessage: String\n}\n\ntype Subscription {\n    greetings: Greeting\n}\n\ntype Greeting {\n    message: String\n}\n\ntype Mutation {\n    setMessage(message: String): Greeting\n}\n")),(0,s.kt)("h2",{id:"server"},"Server"),(0,s.kt)("p",null,"First we will add the python functionality:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'stored_message = ""\n\nasync def get_message(*args):\n    global stored_message\n    return stored_message\n\n\nasync def set_message(root, _info, message):\n    global stored_message\n    stored_message = message\n    return {\n        "message": message\n    }\n')),(0,s.kt)("p",null,"And connect it to the schema:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"schema.query_type.fields['getMessage'].resolve = get_message\nschema.mutation_type.fields['setMessage'].resolve = set_message\n")),(0,s.kt)("p",null,"This is all that is required on the server side"),(0,s.kt)("h2",{id:"client"},"Client"),(0,s.kt)("p",null,"Here is an example of using the mutation from the client:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'async def verify_message(graphql: Client, expected_message: str):\n    response = await graphql.execute_async(\n        gql("""query { getMessage }""")\n    )\n\n    assert response[\'getMessage\'] == expected_message\n\n    print(response)\n\n\nasync def set_message(graphql: Client, message: str):\n    response = await graphql.execute_async(\n        gql("""mutation SetMessage($message:String) { setMessage (message: $message ) {message}}"""),\n        variable_values={"message": message}\n    )\n\n    print(response)\n')))}m.isMDXComponent=!0}}]);