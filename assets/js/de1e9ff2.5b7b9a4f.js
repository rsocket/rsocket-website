"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[67],{3905:(e,t,s)=>{s.d(t,{Zo:()=>d,kt:()=>f});var n=s(7294);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e,t){if(null==e)return{};var s,n,r=function(e,t){if(null==e)return{};var s,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):i(i({},t),e)),s},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var s=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(s),m=r,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||a;return s?n.createElement(f,i(i({ref:t},d),{},{components:s})):n.createElement(f,i({ref:t},d))}));function f(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=s.length,i=new Array(a);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<a;p++)i[p]=s[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,s)}m.displayName="MDXCreateElement"},4842:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var n=s(7462),r=s(3366),a=(s(7294),s(3905)),i=["components"],o={slug:"/guides/rsocket-py/tutorial/user_session",title:"User session",sidebar_label:"User session"},l=void 0,p={unversionedId:"guides/rsocket-py/tutorial/user_session",id:"guides/rsocket-py/tutorial/user_session",title:"User session",description:"Let's add a server side session to store the logged-in user's state. Later on it will be used to temporarily store",source:"@site/content-docs/guides/rsocket-py/tutorial/02-user_session.mdx",sourceDirName:"guides/rsocket-py/tutorial",slug:"/guides/rsocket-py/tutorial/user_session",permalink:"/guides/rsocket-py/tutorial/user_session",draft:!1,editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/tutorial/02-user_session.mdx",tags:[],version:"current",lastUpdatedBy:"Kevin Viglucci",lastUpdatedAt:1671847980,formattedLastUpdatedAt:"Dec 24, 2022",sidebarPosition:2,frontMatter:{slug:"/guides/rsocket-py/tutorial/user_session",title:"User session",sidebar_label:"User session"},sidebar:"guides",previous:{title:"Request routing",permalink:"/guides/rsocket-py/tutorial/request_routing"},next:{title:"Private messages",permalink:"/guides/rsocket-py/tutorial/messages"}},d={},u=[{value:"Server side",id:"server-side",level:2},{value:"Data-classes",id:"data-classes",level:3},{value:"Login endpoint",id:"login-endpoint",level:3},{value:"Client side",id:"client-side",level:2}],c={toc:u};function m(e){var t=e.components,s=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Let's add a server side session to store the logged-in user's state. Later on it will be used to temporarily store\nthe messages which will be delivered to the client."),(0,a.kt)("p",null,"See resulting code on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rsocket/rsocket-py/tree/master/examples/tutorial/step2"},"GitHub")),(0,a.kt)("h2",{id:"server-side"},"Server side"),(0,a.kt)("h3",{id:"data-classes"},"Data-classes"),(0,a.kt)("p",null,"First we will add some ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/dataclasses.html"},"dataclasses")," to represent a single user session, and a lookup dictionary for all user sessions\nby their id."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from dataclasses import dataclass, field\nfrom typing import Dict\nfrom weakref import WeakValueDictionary\n\nclass SessionId(str):\n    pass\n\n@dataclass()\nclass UserSessionData:\n    username: str\n    session_id: SessionId\n\n@dataclass(frozen=True)\nclass ChatData:\n    user_session_by_id: Dict[SessionId, UserSessionData] = field(default_factory=WeakValueDictionary)\n\nchat_data = ChatData()\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"SessionId")," defined in ",(0,a.kt)("em",{parentName:"p"},"Lines 5-6")," is required in order to store the string session-id as a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/weakref.html"},"weak reference")," later on."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Lines 8-11")," define the ",(0,a.kt)("inlineCode",{parentName:"p"},"UserSessionData")," dataclass which represents the user's session. It contains two fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"username")," - Human readable name specified in the login payload."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"session_id")," - unique id (e.g. UUID4) generated to identify the session.")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Lines 13-15")," define the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatData")," dataclass which represents the application's data. For now, it contains only a dict for looking up\nuser sessions by their id. It is initialized as a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/weakref.html#weakref.WeakValueDictionary"},"WeakValueDictionary")," in order for the session to be removed when the user disconnects."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Line 17")," instantiates a global instance of this class."),(0,a.kt)("h3",{id:"login-endpoint"},"Login endpoint"),(0,a.kt)("p",null,"Next we will modify the login endpoint to create a user session:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"import logging\nimport uuid\nfrom typing import Optional, Awaitable\n\nfrom rsocket.frame_helpers import ensure_bytes\nfrom rsocket.helpers import utf8_decode, create_response\nfrom rsocket.payload import Payload\nfrom rsocket.routing.request_router import RequestRouter\n\nclass ChatUserSession:\n\n    def __init__(self):\n        self._session: Optional[UserSessionData] = None\n\n    def router_factory(self):\n        router = RequestRouter()\n\n        @router.response('login')\n        async def login(payload: Payload) -> Awaitable[Payload]:\n            username = utf8_decode(payload.data)\n\n            logging.info(f'New user: {username}')\n\n            session_id = SessionId(uuid.uuid4())\n            self._session = UserSessionData(username, session_id)\n            chat_data.user_session_by_id[session_id] = self._session\n\n            return create_response(ensure_bytes(session_id))\n\n        return router\n")),(0,a.kt)("p",null,"In order to keep a reference to the ",(0,a.kt)("inlineCode",{parentName:"p"},"UserSessionData")," we will modify the request handler factory.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatUserSession")," class will keep the reference to the session data, and define the request routes."),(0,a.kt)("p",null,"Below is the modified ",(0,a.kt)("inlineCode",{parentName:"p"},"handler_factory"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class CustomRoutingRequestHandler(RoutingRequestHandler):\n    def __init__(self, session: ChatUserSession):\n        super().__init__(session.router_factory())\n        self._session = session\n\ndef handler_factory():\n    return CustomRoutingRequestHandler(ChatUserSession())\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomRoutingRequestHandler")," class (",(0,a.kt)("em",{parentName:"p"},"Lines 1-4"),") is the actual request handler which will wrap the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatUserSession")," instance."),(0,a.kt)("p",null,"Finally, we modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"handler_factory")," (",(0,a.kt)("em",{parentName:"p"},"Lines 6-7"),") to instantiate the handler and the session."),(0,a.kt)("h2",{id:"client-side"},"Client side"),(0,a.kt)("p",null,"Below is the modified ChatClient:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.extensions.helpers import composite, route\nfrom rsocket.frame_helpers import ensure_bytes\nfrom rsocket.payload import Payload\nfrom rsocket.rsocket_client import RSocketClient\n\nclass ChatClient:\n    def __init__(self, rsocket: RSocketClient):\n        self._rsocket = rsocket\n        self._session_id = None\n        self._username: Optional[str] = None\n\n    async def login(self, username: str):\n        payload = Payload(ensure_bytes(username), composite(route('login')))\n        response = await self._rsocket.request_response(payload)\n        self._session_id = response.data\n        self._username = username\n        return self\n")),(0,a.kt)("p",null,"Instead of a greeting from the server, we now receive a session id in the response payload. ",(0,a.kt)("em",{parentName:"p"},"Line 14")," stores this session on the client class."),(0,a.kt)("p",null,"We also store the username on the client for later printing as part of incoming messages."))}m.isMDXComponent=!0}}]);