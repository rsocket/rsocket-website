"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=p(t),d=a,m=g["".concat(l,".").concat(d)]||g[d]||u[d]||o;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[g]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>g});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),s=["components"],i={slug:"/guides/rsocket-py/graphql",title:"GraphQL integration",sidebar_label:"Introduction"},l=void 0,p={unversionedId:"guides/rsocket-py/graphql/index",id:"guides/rsocket-py/graphql/index",title:"GraphQL integration",description:"This guide will go over using GraphQL over RSocket, both client and server side.",source:"@site/content-docs/guides/rsocket-py/graphql/index.mdx",sourceDirName:"guides/rsocket-py/graphql",slug:"/guides/rsocket-py/graphql",permalink:"/guides/rsocket-py/graphql",draft:!1,editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/graphql/index.mdx",tags:[],version:"current",lastUpdatedBy:"jell-o-fishi",lastUpdatedAt:1696904070,formattedLastUpdatedAt:"Oct 10, 2023",frontMatter:{slug:"/guides/rsocket-py/graphql",title:"GraphQL integration",sidebar_label:"Introduction"},sidebar:"guides",previous:{title:"RxPy integration",permalink:"/guides/rsocket-py/rxpy"},next:{title:"Mutation",permalink:"/guides/rsocket-py/graphql/mutation"}},c={},g=[{value:"Schema",id:"schema",level:2},{value:"Server",id:"server",level:2},{value:"Client",id:"client",level:2}],u={toc:g};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide will go over using GraphQL over RSocket, both client and server side.\nThis document assumes you know how to set up an RSocket server with a routing handler."),(0,o.kt)("p",null,"To use the graphql integration, install using ",(0,o.kt)("inlineCode",{parentName:"p"},"pip install rsocket[graphql]")),(0,o.kt)("p",null,"The implementation uses ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/graphql-core/"},"graphql-core")," on the server side, and ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/gql/"},"gql")," for the client side."),(0,o.kt)("h2",{id:"schema"},"Schema"),(0,o.kt)("p",null,"The following examples use the given GraphQL schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n    greeting: Greeting\n}\n\ntype Subscription {\n    greetings: Greeting\n}\n\ntype Greeting {\n    message: String\n}\n")),(0,o.kt)("h2",{id:"server"},"Server"),(0,o.kt)("p",null,"We will construct a simple server which will respond to requests to the schema given in the previous section.\nFirst we will define the resolve methods:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import asyncio\n\nasync def greeting(*args):\n    return {\n        'message': \"Hello world\"\n    }\n\n\ndef greetings(*args):\n    async def results():\n        for i in range(10):\n            yield {'greetings': {'message': f\"Hello world {i}\"}}\n            await asyncio.sleep(1)\n\n    return results()\n")),(0,o.kt)("p",null,"Load the schema from the file, and connect the methods to it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from graphql import build_schema\n\nwith open('rsocket.graphqls') as fd:\n    schema = build_schema(fd.read())\n\nschema.query_type.fields['greeting'].resolve = greeting\nschema.subscription_type.fields['greetings'].subscribe = greetings\n")),(0,o.kt)("p",null,"Finally, expose this schema via RSocket:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import asyncio\nimport logging\nimport sys\n\nfrom rsocket.graphql.server_helper import graphql_handler\nfrom rsocket.routing.routing_request_handler import RoutingRequestHandler\nfrom rsocket.rsocket_server import RSocketServer\nfrom rsocket.transports.tcp import TransportTCP\n\n\ndef handler_factory():\n    return RoutingRequestHandler(graphql_handler(schema, 'graphql'))\n\n\nasync def run_server(server_port):\n    logging.info('Starting server at localhost:%s', server_port)\n\n    def session(*connection):\n        RSocketServer(TransportTCP(*connection), handler_factory=handler_factory)\n\n    server = await asyncio.start_server(session, 'localhost', server_port)\n\n    async with server:\n        await server.serve_forever()\n\n\nif __name__ == '__main__':\n    port = sys.argv[1] if len(sys.argv) > 1 else 9191\n    logging.basicConfig(level=logging.DEBUG)\n    asyncio.run(run_server(port))\n")),(0,o.kt)("p",null,"Assuming you already know how to set up an RSocket server over TCP, the above code should look familiar."),(0,o.kt)("p",null,"The connection between RSocket and GraphQL is done using the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql_handler")," (",(0,o.kt)("em",{parentName:"p"},"Line 12"),") method which accepts 2 arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The GraphQL schema object."),(0,o.kt)("li",{parentName:"ul"},"The RSocket route under which the schema will be available, both queries, and subscriptions.")),(0,o.kt)("h2",{id:"client"},"Client"),(0,o.kt)("p",null,"The following example client can be used with the server defined in the previous section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import asyncio\nimport logging\nimport sys\n\nfrom gql import Client\n\nfrom rsocket.extensions.mimetypes import WellKnownMimeTypes\nfrom rsocket.graphql.rsocket_transport import RSocketTransport\nfrom rsocket.helpers import single_transport_provider\nfrom rsocket.rsocket_client import RSocketClient\nfrom rsocket.transports.tcp import TransportTCP\n\n\nasync def main(server_port: int):\n    connection = await asyncio.open_connection('localhost', server_port)\n\n    async with RSocketClient(single_transport_provider(TransportTCP(*connection)),\n                             metadata_encoding=WellKnownMimeTypes.MESSAGE_RSOCKET_COMPOSITE_METADATA) as client:\n       with open('rsocket.graphqls') as fd:\n           schema = build_schema(fd.read())\n\n        graphql = Client(\n            schema=schema,\n            transport=RSocketTransport(client),\n        )\n\nif __name__ == '__main__':\n    port = sys.argv[1] if len(sys.argv) > 1 else 9191\n    logging.basicConfig(level=logging.DEBUG)\n    asyncio.run(main(port))\n")),(0,o.kt)("p",null,"On the client side, an RSocket connection is first opened, and then passed as the transport to a GraphQL client (",(0,o.kt)("em",{parentName:"p"},"Line 22-25"),").\nThe graphql client can be used as usual, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute_async")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe_async")," methods, as in these examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'async def subscription(graphql: Client):\n    async for response in graphql.subscribe_async(\n            document=gql("""\n                subscription {\n                    greetings {message}\n                }\n                """),\n            get_execution_result=True):\n\n        print(response.data)\n\n\nasync def greeting(graphql: Client):\n    response = await graphql.execute_async(\n        gql("""query { greeting { message } }"""),\n        get_execution_result=True)\n\n    assert response.data[\'greeting\'][\'message\'] == \'Hello world\'\n\n    print(response.data)\n')))}d.isMDXComponent=!0}}]);