"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[974],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return r?n.createElement(h,s(s({ref:t},u),{},{components:r})):n.createElement(h,s({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1921:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),s=["components"],i={slug:"/guides/rsocket-py/tutorial/request_routing",title:"Request routing",sidebar_label:"Request routing"},l=void 0,p={unversionedId:"guides/rsocket-py/tutorial/request_routing",id:"guides/rsocket-py/tutorial/request_routing",title:"Request routing",description:"The chat application will have various functionality (e.g. private messages and channels). Each request to the server will",source:"@site/content-docs/guides/rsocket-py/tutorial/01-request_routing.mdx",sourceDirName:"guides/rsocket-py/tutorial",slug:"/guides/rsocket-py/tutorial/request_routing",permalink:"/guides/rsocket-py/tutorial/request_routing",draft:!1,editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/tutorial/01-request_routing.mdx",tags:[],version:"current",lastUpdatedBy:"Kevin Viglucci",lastUpdatedAt:1670389054,formattedLastUpdatedAt:"Dec 7, 2022",sidebarPosition:1,frontMatter:{slug:"/guides/rsocket-py/tutorial/request_routing",title:"Request routing",sidebar_label:"Request routing"},sidebar:"guides",previous:{title:"Getting started",permalink:"/guides/rsocket-py/tutorial/base"},next:{title:"User session",permalink:"/guides/rsocket-py/tutorial/user_session"}},u={},c=[{value:"Server side",id:"server-side",level:2},{value:"Routing request handler",id:"routing-request-handler",level:3},{value:"Use the routing request handler",id:"use-the-routing-request-handler",level:3},{value:"Client side",id:"client-side",level:2},{value:"ChatClient class",id:"chatclient-class",level:3},{value:"Use the new ChatClient class",id:"use-the-new-chatclient-class",level:3}],d={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The chat application will have various functionality (e.g. private messages and channels). Each request to the server will\nbe identified by a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rsocket/rsocket/blob/master/Extensions/Routing.md"},"route")," (similar to paths in an HTTP URL). To implement this we will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestRouter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"RoutingRequestHandler"),"\nclasses."),(0,o.kt)("p",null,"See resulting code on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rsocket/rsocket-py/tree/master/examples/tutorial/step1"},"GitHub")),(0,o.kt)("h2",{id:"server-side"},"Server side"),(0,o.kt)("p",null,"We will modify the example from the previous step into a routed request response."),(0,o.kt)("h3",{id:"routing-request-handler"},"Routing request handler"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"handler_factory")," method below replaces the ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler")," class from the previous step:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from typing import Awaitable\n\nfrom rsocket.frame_helpers import ensure_bytes\nfrom rsocket.helpers import utf8_decode, create_response\nfrom rsocket.payload import Payload\nfrom rsocket.routing.request_router import RequestRouter\nfrom rsocket.routing.routing_request_handler import RoutingRequestHandler\n\ndef handler_factory() -> RoutingRequestHandler:\n    router = RequestRouter()\n\n    @router.response('login')\n    async def login(payload: Payload) -> Awaitable[Payload]:\n        username = utf8_decode(payload.data)\n        return create_response(ensure_bytes(f'Welcome to chat, {username}'))\n\n    return RoutingRequestHandler(router)\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Line 10")," instantiates the ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestRouter"),". This helper is used as a method decorator to register the route of each request\n(it is similar to Flask and Quart syntax)."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Lines 12-15")," define the login method and attach it to a request-response with the ",(0,o.kt)("b",null,"login")," route.\nThe method name does not have to match the route."),(0,o.kt)("p",null,"All methods decorated by the request router accept two optional arguments, ",(0,o.kt)("em",{parentName:"p"},"payload")," and ",(0,o.kt)("em",{parentName:"p"},"composite_metadata"),". For now, we only pass the payload.\nIt is ann instance of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Payload")," class which contains the data and metadata of the request. This argument must appear with the exact names as above,\nas that is how the decorator detects where to pass the payload. The argument type hints are optional."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Line 17")," returns the actual request handler, an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"RoutingRequestHandler"),", which uses the request router instance."),(0,o.kt)("h3",{id:"use-the-routing-request-handler"},"Use the routing request handler"),(0,o.kt)("p",null,"Modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"RSocketServer")," instantiation from the previous example and pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"handler_factory")," method as the ",(0,o.kt)("em",{parentName:"p"},"handler_factory")," parameter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.rsocket_server import RSocketServer\nfrom rsocket.transports.tcp import TransportTCP\n\nasync def run_server():\n    def session(*connection):\n        RSocketServer(TransportTCP(*connection), handler_factory=handler_factory)\n")),(0,o.kt)("h2",{id:"client-side"},"Client side"),(0,o.kt)("p",null,"Let's modify the client side to call this new routed request. For readability and maintainability, we will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatClient"),"\nwhich will wrap the RSocket client and provide the methods for interacting with the server."),(0,o.kt)("h3",{id:"chatclient-class"},"ChatClient class"),(0,o.kt)("p",null,"Below is the complete code for the new ",(0,o.kt)("b",null,"client.py")," module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.extensions.helpers import composite, route\nfrom rsocket.frame_helpers import ensure_bytes\nfrom rsocket.helpers import  utf8_decode\nfrom rsocket.payload import Payload\nfrom rsocket.rsocket_client import RSocketClient\n\nclass ChatClient:\n    def __init__(self, rsocket: RSocketClient):\n        self._rsocket = rsocket\n\n    async def login(self, username: str):\n        payload = Payload(ensure_bytes(username), composite(route('login')))\n        response = await self._rsocket.request_response(payload)\n        print(f'Server response: {utf8_decode(response.data)}')\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Lines 7-14")," define our new ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatClient")," which will encapsulate the methods used to interact with the chat server."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Lines 11-14")," define a ",(0,o.kt)("inlineCode",{parentName:"p"},"login")," method. It uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"composite")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"route")," helper methods to create the metadata which will ensure\nthe payload is routed to the method registered on the server side in the previous step."),(0,o.kt)("h3",{id:"use-the-new-chatclient-class"},"Use the new ChatClient class"),(0,o.kt)("p",null,"Let's modify the client module to test our new ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatClient"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.extensions.mimetypes import WellKnownMimeTypes\nfrom rsocket.helpers import single_transport_provider\nfrom rsocket.rsocket_client import RSocketClient\nfrom rsocket.transports.tcp import TransportTCP\n\nasync def main():\n    ...\n    async with RSocketClient(single_transport_provider(TransportTCP(*connection)),\n                             metadata_encoding=WellKnownMimeTypes.MESSAGE_RSOCKET_COMPOSITE_METADATA) as client:\n        user = ChatClient(client)\n        await user.login('George')\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Line 9")," changes the ",(0,o.kt)("em",{parentName:"p"},"metadata_encoding")," type to be COMPOSITE_METADATA. This is required for routing support."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Lines 10-11")," instantiate a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatClient")," and call the ",(0,o.kt)("inlineCode",{parentName:"p"},"login")," method."))}m.isMDXComponent=!0}}]);