/*! For license information please see c4f5d8e4.f84368f2.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([[195],{1342:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>N});var r=n(7294),a=n(4184),o=n.n(a),l=n(7676),c=n(7462),s=n(6010),i=n(2389),u=n(7392),m=n(7094),p=n(2466);const d="tabList__CuJ",b="tabItem_LNqP";function g(e){var t,n,a=e.lazy,o=e.block,l=e.defaultValue,i=e.values,g=e.groupId,v=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=i?i:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),E=(0,u.l)(h,(function(e,t){return e.value===t.value}));if(E.length>0)throw new Error('Docusaurus error: Duplicate values "'+E.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===l?l:null!=(t=null!=l?l:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:f[0].props.value;if(null!==k&&!h.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,m.U)(),S=y.tabGroupChoices,_=y.setTabGroupChoices,w=(0,r.useState)(k),N=w[0],R=w[1],C=[],T=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var x=S[g];null!=x&&x!==N&&h.some((function(e){return e.value===x}))&&R(x)}var P=function(e){var t=e.currentTarget,n=C.indexOf(t),r=h[n].value;r!==N&&(T(t),R(r),null!=g&&_(g,String(r)))},Z=function(e){var t,n=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":var r,a=C.indexOf(e.currentTarget)+1;n=null!=(r=C[a])?r:C[0];break;case"ArrowLeft":var o,l=C.indexOf(e.currentTarget)-1;n=null!=(o=C[l])?o:C[C.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},v)},h.map((function(e){var t=e.value,n=e.label,a=e.attributes;return r.createElement("li",(0,c.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:function(e){return C.push(e)},onKeyDown:Z,onClick:P},a,{className:(0,s.Z)("tabs__item",b,null==a?void 0:a.className,{"tabs__item--active":N===t})}),null!=n?n:t)}))),a?(0,r.cloneElement)(f.filter((function(e){return e.props.value===N}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}function v(e){var t=(0,i.Z)();return r.createElement(g,(0,c.Z)({key:String(t)},e))}const f="tabItem_Ymn6";function h(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",className:(0,s.Z)(f,a),hidden:n},t)}var E=n(814),k=n(9960),y=n(2263),S=n(4996);const _={heroBanner:"heroBanner_UJJx",buttons:"buttons_pzbO",features:"features_keug",featureImage:"featureImage_yA8i","corner-ribbon":"corner-ribbon_o2wy","corner-ribbon__inner":"corner-ribbon__inner_NXpa","corner-ribbon__ribbon":"corner-ribbon__ribbon_W0ik","ribbon-support":"ribbon-support_rNKE","ribbon-left":"ribbon-left_rHXK","ribbon-right":"ribbon-right_sUZo"};function w(){return r.createElement(r.Fragment,null,r.createElement(v,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"},{label:"C++",value:"cpp"},{label:"TypeScript",value:"ts"},{label:"Python",value:"python"}]},r.createElement(h,{value:"java"},r.createElement("div",{style:{marginBottom:10}},r.createElement("h3",null,"Server Example"),r.createElement(E.Z,{className:"language-java"},"\nRSocketServer.create(new PingHandler())\n    .payloadDecoder(PayloadDecoder.ZERO_COPY)\n    .bind(TcpServerTransport.create(7878))\n    .block()\n    .onClose();\n                    ")),r.createElement("div",null,r.createElement("h3",null,"Client Example"),r.createElement(E.Z,{className:"language-java"},'\nMono<RSocket> client =\n    RSocketConnector.create()\n        .payloadDecoder(PayloadDecoder.ZERO_COPY)\n        .connect(TcpClientTransport.create(7878));\n\nPingClient pingClient = new PingClient(client);\n\nRecorder recorder = pingClient.startTracker(Duration.ofSeconds(1));\n\nint count = 1_000;\n\npingClient\n    .requestResponsePingPong(count, recorder)\n    .doOnTerminate(() -> System.out.println("Sent " + count + " messages."))\n    .blockLast();\n                    '))),r.createElement(h,{value:"kotlin"},r.createElement("div",{style:{marginBottom:10}},r.createElement("h3",null,"Server Example"),r.createElement(E.Z,{className:"language-kotlin"},'embeddedServer(CIO, port = 9000) { // create and configure ktor server and start it on localhost:9000\n    install(WebSockets)\n    install(RSocketSupport)\n    routing {\n        rSocket("rsocket") { // configure route \'localhost:9000/rsocket\'\n            RSocketRequestHandler { // create simple request handler\n                requestStream { request: Payload -> // register request/stream handler\n                    println("Received request: \'${request.data.readText()}\'")\n                    flow {\n                        repeat(10) { i -> emit(buildPayload { data("data: $i") }) }\n                    }\n                }\n            }\n        }\n    }\n}.start(wait = true)')),r.createElement("div",null,r.createElement("h3",null,"Client Example"),r.createElement(E.Z,{className:"language-kotlin"},'val client = HttpClient { //create and configure ktor client\n    install(WebSockets)\n    install(RSocketSupport)\n}\n// connect to \'localhost:9000/rsocket\'\nval rSocket: RSocket = client.rSocket(path = "rsocket", port = 9000)\n// request stream\nval stream: Flow<Payload> = rSocket.requestStream(buildPayload { data("Hello") })\n// collect stream\nstream.collect { payload: Payload ->\n    println("Received payload: \'${payload.data.readText()}\'")\n}'))),r.createElement(h,{value:"cpp"},r.createElement("div",{style:{marginBottom:10}},r.createElement("h3",null,"Server Example"),r.createElement(E.Z,{className:"language-cpp"},"\n  // RSocket server accepting on TCP\n  auto rs = RSocket::createServer(TcpConnectionAcceptor::create(FLAGS_port));\n  // global request handler\n  auto handler = std::make_shared<HelloStreamRequestHandler>();\n  // start accepting connections\n  rs->startAndPark([handler](auto r) { return handler; });\n                    ")),r.createElement("div",null,r.createElement("h3",null,"Client Example"),r.createElement(E.Z,{className:"language-cpp"},'\nauto rsf = RSocket::createClient(TcpConnectionFactory::create(host, port));\nauto s = std::make_shared<ExampleSubscriber>(5, 6);\nauto rs = rsf->connect().get();\nrs->requestStream(Payload("Jane"), s);\n                    '))),r.createElement(h,{value:"ts"},r.createElement("div",{style:{marginBottom:10}},r.createElement("h3",null,"Server Example"),r.createElement(E.Z,{className:"language-ts"},'import { OnExtensionSubscriber, OnNextSubscriber, OnTerminalSubscriber, Payload, RSocketServer } from "rsocket-core";\nimport { TcpServerTransport } from "rsocket-tcp-server";\n\nconst transport = new TcpServerTransport({\n  listenOptions: {\n    host: "127.0.0.1",\n    port: 9090,\n  },\n});\n\nconst server = new RSocketServer({\n  transport,\n  acceptor: {\n    accept: async () => {\n      return {\n        requestResponse: (\n          payload: Payload,\n          responderStream: OnTerminalSubscriber &\n            OnNextSubscriber &\n            OnExtensionSubscriber\n        ) => {\n          const timeout = setTimeout(\n            () => {\n              return responderStream.onNext(\n                {\n                  data: Buffer.concat([Buffer.from("Echo: "), payload.data]),\n                },\n                true\n              );\n            },\n            1000\n          );\n          return {\n            cancel: () => {\n              clearTimeout(timeout);\n              console.log("cancelled");\n            },\n            onExtension: () => { },\n          };\n        },\n      };\n    },\n  },\n});\n\nawait server.bind();')),r.createElement("div",null,r.createElement("h3",null,"Client Example"),r.createElement(E.Z,{className:"language-ts"},'import { RSocketConnector } from "rsocket-core";\nimport { TcpClientTransport } from "rsocket-tcp-client";\n\nconst connector = new RSocketConnector({\n  transport: new TcpClientTransport({\n    connectionOptions: {\n      host: "127.0.0.1",\n      port: 9090,\n    },\n  }),\n});\n\nconst rsocket = await connector.connect();\n\nrsocket.requestResponse(\n  {\n    data: Buffer.from("Hello World"),\n  },\n  {\n    onError: (e) => {\n      console.error(e);\n    },\n    onNext: (payload, isComplete) => {\n      console.log(\n        `payload[data: ${payload.data}; metadata: ${payload.metadata}]|${isComplete}`\n      );\n    },\n    onComplete: () => { },\n    onExtension: () => { },\n  }\n);'))),r.createElement(h,{value:"python"},r.createElement("div",{style:{marginBottom:10}},r.createElement("h3",null,"Server Example"),r.createElement(E.Z,{className:"language-python"},"import asyncio\nimport logging\n\nfrom rsocket.helpers import create_future\nfrom rsocket.local_typing import Awaitable\nfrom rsocket.payload import Payload\nfrom rsocket.request_handler import BaseRequestHandler\nfrom rsocket.rsocket_server import RSocketServer\nfrom rsocket.transports.tcp import TransportTCP\n\n\nclass Handler(BaseRequestHandler):\n    async def request_response(self, payload: Payload) -> Awaitable[Payload]:\n        logging.info(payload.data)\n\n        return create_future(Payload(b'Echo: ' + payload.data))\n\n\nasync def run_server():\n    def session(*connection):\n        RSocketServer(TransportTCP(*connection), handler_factory=Handler)\n\n    server = await asyncio.start_server(session, 'localhost', 7878)\n\n    async with server:\n        await server.serve_forever()\n\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    asyncio.run(run_server())\n")),r.createElement("div",null,r.createElement("h3",null,"Client Example"),r.createElement(E.Z,{className:"language-python"},"import asyncio\nimport logging\n\nfrom rsocket.helpers import single_transport_provider\nfrom rsocket.payload import Payload\nfrom rsocket.rsocket_client import RSocketClient\nfrom rsocket.rx_support.rx_rsocket import RxRSocket\nfrom rsocket.transports.tcp import TransportTCP\n\n\nasync def main():\n    connection = await asyncio.open_connection('localhost', 7878)\n\n    async with RSocketClient(single_transport_provider(TransportTCP(*connection))) as client:\n\n        rx_client = RxRSocket(client)\n        payload = Payload(b'Hello World')\n\n        result = await rx_client.request_response(payload).pipe()\n\n        logging.info(result.data)\n\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    asyncio.run(main())\n")))))}const N=function(){var e=(0,S.C)().withBaseUrl,t=(0,y.Z)().siteConfig,n=void 0===t?{}:t,a=r.createElement(k.Z,{to:e("about/implementations")},"implementation libraries"),c=r.createElement(k.Z,{to:e("about/protocol")},"Protocol document"),s=[{title:"Java",url:"https://github.com/rsocket/rsocket-java"},{title:"Kotlin",url:"https://github.com/rsocket/rsocket-kotlin"},{title:"JavaScript",url:"https://github.com/rsocket/rsocket-js"},{title:"Go",url:"https://github.com/rsocket/rsocket-go"},{title:".Net",url:"https://github.com/rsocket/rsocket-net"},{title:"C++",url:"https://github.com/rsocket/rsocket-cpp"},{title:"Swift",url:"https://github.com/rsocket/rsocket-swift"},{title:"Python",url:"https://github.com/rsocket/rsocket-py"},{title:"Rust",url:"https://github.com/rsocket/rsocket-rust"}],i=[{title:r.createElement(r.Fragment,null,"Why RSocket?"),imageUrl:"img/undraw_server_cluster_jwwq_dark.svg",description:r.createElement(r.Fragment,null,"RSocket provides a protocol for Reactive Streams semantics between client-server, and server-server communication."),button:r.createElement(k.Z,{className:o()("button button--secondary button--md",_.getStarted),to:e("about/motivations")},"Motivations")},{title:r.createElement(r.Fragment,null,"What is RSocket?"),imageUrl:"img/undraw_Faq_re_31cw.svg",description:r.createElement(r.Fragment,null,"RSocket is a binary protocol for use on byte stream transports such as TCP, WebSockets, and Aeron."),button:r.createElement(k.Z,{className:o()("button button--secondary button--md",_.getStarted),to:e("about/protocol")},"Protocol Spec")},{title:r.createElement(r.Fragment,null,"How do I use RSocket?"),imageUrl:"img/undraw_building_blocks_n0nc_dark.svg",description:r.createElement(r.Fragment,null,"RSocket is intended to be consumed via one of the various ",a," which implement the RSocket Protocol."),button:r.createElement(k.Z,{className:o()("button button--secondary button--md",_.getStarted),to:e("about/implementations")},"Browse Libraries")}];return console.log(_),r.createElement(l.Z,{title:n.title,description:n.tagline},r.createElement("header",{className:o()("hero hero--primary",_.heroBanner)},r.createElement("a",{href:"https://crowdfunding.lfx.linuxfoundation.org/projects/bb4066fb-8137-4557-8224-f17dba073494",rel:"noopener noreferrer",target:"_blank",className:o()([_["ribbon-support"],_["ribbon-right"]])},r.createElement("span",null,"Support RSocket")),r.createElement("div",{className:"container"},r.createElement("h1",{className:"hero__title"},r.createElement("img",{alt:"RSocket Logo",className:"header__logo",src:e("img/r-socket-horizontal-pink.svg")})),r.createElement("p",{className:"hero__subtitle"},n.tagline),r.createElement("div",{className:_.buttons},r.createElement(k.Z,{className:o()("button button--secondary button--lg",_.getStarted),to:e("about/faq")},"Read the FAQ")))),r.createElement("main",null,i&&i.length&&r.createElement("section",{className:_.features},r.createElement("div",{className:"container"},r.createElement("div",{className:"row"},i.map((function(t,n){var a=t.imageUrl,l=t.title,c=t.description,s=t.button;return r.createElement("div",{key:n,className:o()("col","col--"+12/i.length,_.feature)},a&&r.createElement("div",{className:"text--center"},r.createElement("img",{className:_.featureImage,src:e(a),alt:l})),r.createElement("h3",null,l),r.createElement("p",null,c),s)}))))),s&&s.length&&r.createElement("section",{className:_.features},r.createElement("div",{className:"container"},r.createElement("div",null,r.createElement("h2",null,"Implementations"),r.createElement("p",null,"Drivers are assumed to implement all core features defined in the ",c,".")),r.createElement("div",{style:{marginBottom:20}},s.map((function(e,t){var n=e.title,a=e.url;return r.createElement(k.Z,{key:t,style:{marginRight:4,marginBottom:4},className:o()("button button--secondary button--md",_.getStarted),to:a},n)}))),r.createElement("div",null,r.createElement("h3",null,"Basic Examples"),r.createElement(w,null)))),r.createElement("div",{className:"container"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col col--6 col--offset-3 padding-vert--lg"},r.createElement("h2",null,"Introduction Video"),r.createElement("iframe",{width:"100%",height:"315",src:"https://www.youtube.com/embed/KapSjhUYSz4",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),r.createElement("div",{className:"text--center padding-vert--lg"},r.createElement(k.Z,{className:"button button--primary button--lg",to:e("about/faq")},"Learn more about RSocket!")))))))}},4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n)){if(n.length){var l=a.apply(null,n);l&&e.push(l)}}else if("object"===o)if(n.toString===Object.prototype.toString)for(var c in n)r.call(n,c)&&n[c]&&e.push(c);else e.push(n.toString())}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()}}]);