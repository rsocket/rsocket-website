"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2255],{3905:(e,t,s)=>{s.d(t,{Zo:()=>d,kt:()=>f});var n=s(7294);function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function r(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function a(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?r(Object(s),!0).forEach((function(t){i(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e,t){if(null==e)return{};var s,n,i=function(e,t){if(null==e)return{};var s,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||(i[s]=e[s]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(i[s]=e[s])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):a(a({},t),e)),s},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var s=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(s),f=i,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||r;return s?n.createElement(m,a(a({ref:t},d),{},{components:s})):n.createElement(m,a({ref:t},d))}));function f(e,t){var s=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=s.length,a=new Array(r);a[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var c=2;c<r;c++)a[c]=s[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,s)}p.displayName="MDXCreateElement"},6134:(e,t,s)=>{s.r(t),s.d(t,{frontMatter:()=>o,contentTitle:()=>l,metadata:()=>c,toc:()=>d,default:()=>p});var n=s(7462),i=s(3366),r=(s(7294),s(3905)),a=["components"],o={slug:"/guides/rsocket-py/tutorial/statistics",title:"Statistics",sidebar_label:"Statistics"},l=void 0,c={unversionedId:"guides/rsocket-py/tutorial/statistics",id:"guides/rsocket-py/tutorial/statistics",isDocsHomePage:!1,title:"Statistics",description:"As a last step, we will add passing some statistics between the client and the server:",source:"@site/content-docs/guides/rsocket-py/tutorial/05-statistics.mdx",sourceDirName:"guides/rsocket-py/tutorial",slug:"/guides/rsocket-py/tutorial/statistics",permalink:"/guides/rsocket-py/tutorial/statistics",editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/tutorial/05-statistics.mdx",tags:[],version:"current",lastUpdatedBy:"jell-o-fishi",lastUpdatedAt:1670221305,formattedLastUpdatedAt:"12/5/2022",sidebarPosition:5,frontMatter:{slug:"/guides/rsocket-py/tutorial/statistics",title:"Statistics",sidebar_label:"Statistics"},sidebar:"docs",previous:{title:"File upload/download",permalink:"/guides/rsocket-py/tutorial/files"},next:{title:"Reactivex",permalink:"/guides/rsocket-py/tutorial/reactivex"}},d=[{value:"Shared code",id:"shared-code",children:[]},{value:"Server side",id:"server-side",children:[{value:"Endpoints",id:"endpoints",children:[]}]},{value:"Client side",id:"client-side",children:[]}],u={toc:d};function p(e){var t=e.components,s=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"As a last step, we will add passing some statistics between the client and the server:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The client will be able to send its memory usage to the server."),(0,r.kt)("li",{parentName:"ul"},"The server will report the number of users and channels. The client will be able to specify which of these statistics it wants.")),(0,r.kt)("p",null,"See resulting code on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rsocket/rsocket-py/tree/master/examples/tutorial/step6"},"GitHub")),(0,r.kt)("h2",{id:"shared-code"},"Shared code"),(0,r.kt)("p",null,"We will define some data-classes to represent the payloads being sent between the client and server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from dataclasses import dataclass, field\nfrom typing import Optional, List\n\n@dataclass(frozen=True)\nclass ServerStatistics:\n    user_count: Optional[int] = None\n    channel_count: Optional[int] = None\n\n@dataclass()\nclass ServerStatisticsRequest:\n    ids: Optional[List[str]] = field(default_factory=lambda: ['users', 'channels'])\n    period_seconds: Optional[int] = field(default_factory=lambda: 2)\n\n@dataclass(frozen=True)\nclass ClientStatistics:\n    memory_usage: Optional[int] = None\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Lines 4-7")," define the data sent to the client upon request. It contains two optional fields, the user count and the channel count."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Lines 9-12")," define a request from the client which specified which statistics it wants and how often to report. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ids")," list\nrepresents the two values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerStatistics")," class."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Lines 14-16")," define the statistics sent from the client to the server."),(0,r.kt)("h2",{id:"server-side"},"Server side"),(0,r.kt)("h1",{id:"data-classes"},"Data-classes"),(0,r.kt)("p",null,"First we will add a field on the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserSessionData")," to store the last statistics sent by the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from dataclasses import dataclass\nfrom typing import Optional\n\nfrom shared import ClientStatistics\n\n@dataclass()\nclass UserSessionData:\n    ...\n    statistics: Optional[ClientStatistics] = None\n")),(0,r.kt)("h3",{id:"endpoints"},"Endpoints"),(0,r.kt)("p",null,"We will add two endpoints, one for receiving from the client, and one for requesting specific statistics from the server."),(0,r.kt)("h4",{id:"client-send-statistics"},"Client send statistics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import json\n\nfrom shared import ClientStatistics\nfrom rsocket.helpers import utf8_decode\nfrom rsocket.payload import Payload\nfrom rsocket.routing.request_router import RequestRouter\n\nclass ChatUserSession:\n    def router_factory(self):\n        router = RequestRouter()\n\n        ...\n\n        @router.fire_and_forget('statistics')\n        async def receive_statistics(payload: Payload):\n            statistics = ClientStatistics(**json.loads(utf8_decode(payload.data)))\n            self._session.statistics = statistics\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Lines 14-17")," defines an endpoint for receiving statistics from the client. It uses the fire-and-forget request type, since this\ndata is not critical to the application. No return value is required from this method, and if provided will be ignored."),(0,r.kt)("h4",{id:"receive-requested-statistics"},"Receive requested statistics"),(0,r.kt)("p",null,"We will add a helper method for creating a new statistics response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def new_statistics_data(statistics_request: ServerStatisticsRequest):\n    statistics_data = {}\n\n    if 'users' in statistics_request.ids:\n        statistics_data['user_count'] = len(chat_data.user_session_by_id)\n\n    if 'channels' in statistics_request.ids:\n        statistics_data['channel_count'] = len(chat_data.channel_messages)\n\n    return ServerStatistics(**statistics_data)\n")),(0,r.kt)("p",null,"Next we define the endpoint for sending statistics to the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import asyncio\nimport json\n\nfrom shared import ClientStatistics, ServerStatisticsRequest, ServerStatistics, encode_dataclass\nfrom reactivestreams.publisher import DefaultPublisher\nfrom reactivestreams.subscriber import Subscriber, DefaultSubscriber\nfrom reactivestreams.subscription import DefaultSubscription\nfrom rsocket.helpers import utf8_decode\nfrom rsocket.payload import Payload\nfrom rsocket.routing.request_router import RequestRouter\n\nclass ChatUserSession:\n    def router_factory(self):\n        router = RequestRouter()\n\n        @router.channel('statistics')\n        async def send_statistics():\n\n            class StatisticsChannel(DefaultPublisher, DefaultSubscriber, DefaultSubscription):\n\n                def __init__(self, session: UserSessionData):\n                    super().__init__()\n                    self._session = session\n                    self._requested_statistics = ServerStatisticsRequest()\n\n                def cancel(self):\n                    self._sender.cancel()\n\n                def subscribe(self, subscriber: Subscriber):\n                    super().subscribe(subscriber)\n                    subscriber.on_subscribe(self)\n                    self._sender = asyncio.create_task(self._statistics_sender())\n\n                async def _statistics_sender(self):\n                    while True:\n                        try:\n                            await asyncio.sleep(self._requested_statistics.period_seconds)\n                            next_message = new_statistics_data(self._requested_statistics)\n\n                            self._subscriber.on_next(dataclass_to_payload(next_message))\n                        except Exception:\n                            logging.error('Statistics', exc_info=True)\n\n                def on_next(self, value: Payload, is_complete=False):\n                    request = ServerStatisticsRequest(**json.loads(utf8_decode(value.data)))\n\n                    logging.info(f'Received statistics request {request.ids}, {request.period_seconds}')\n\n                    if request.ids is not None:\n                        self._requested_statistics.ids = request.ids\n\n                    if request.period_seconds is not None:\n                        self._requested_statistics.period_seconds = request.period_seconds\n\n            response = StatisticsChannel(self._session)\n\n            return response, response\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Lines 16-57")," defines an endpoint for sending statistics to the client. It uses the request-channel request type, which will allow\nthe client to both receive the server statistics, and update the server as to which statistics it wants to receive."),(0,r.kt)("h2",{id:"client-side"},"Client side"),(0,r.kt)("p",null,"On the client side we will add the methods to access the new server side functionality:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"send_statistics")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"listen_for_statistics"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import resource\n\nfrom shared import ServerStatistics, ClientStatistics\nfrom rsocket.extensions.helpers import composite, route\nfrom rsocket.payload import Payload\n\nclass ChatClient:\n\n    async def send_statistics(self):\n            memory_usage = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n            payload = Payload(encode_dataclass(ClientStatistics(memory_usage=memory_usage)),\n                              metadata=composite(route('statistics')))\n            await self._rsocket.fire_and_forget(payload)\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"send_statistics")," uses a fire-and-forget request (",(0,r.kt)("em",{parentName:"p"},"Line 15"),") to send statistics to the server. This request does not receive a response,\nso does not wait for confirmation that the payload was delivered, as it is not critical information (at least for this tutorial)."),(0,r.kt)("p",null,"Next we will request statistics from the server. First we will define a handler to listen on the channel request and control it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import json\nfrom asyncio import Event\nfrom datetime import timedelta\nfrom typing import List\n\nfrom examples.tutorial.step6.models import ServerStatistics, ServerStatisticsRequest, dataclass_to_payload\nfrom reactivestreams.publisher import DefaultPublisher\nfrom reactivestreams.subscriber import DefaultSubscriber\nfrom reactivestreams.subscription import DefaultSubscription\nfrom rsocket.helpers import utf8_decode\nfrom rsocket.payload import Payload\n\nclass StatisticsHandler(DefaultPublisher, DefaultSubscriber, DefaultSubscription):\n\n    def __init__(self):\n        super().__init__()\n        self.done = Event()\n\n    def on_next(self, value: Payload, is_complete=False):\n        statistics = ServerStatistics(**json.loads(utf8_decode(value.data)))\n        print(statistics)\n\n        if is_complete:\n            self.done.set()\n\n    def cancel(self):\n        self.subscription.cancel()\n\n    def set_requested_statistics(self, ids: List[str]):\n        self._subscriber.on_next(dataclass_to_payload(ServerStatisticsRequest(ids=ids)))\n\n    def set_period(self, period: timedelta):\n        self._subscriber.on_next(\n            dataclass_to_payload(ServerStatisticsRequest(period_seconds=int(period.total_seconds()))))\n")),(0,r.kt)("p",null,"Next we will use this new handler in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatClient"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.extensions.helpers import composite, route\nfrom rsocket.payload import Payload\n\nclass ChatClient:\n\n    def listen_for_statistics(self) -> StatisticsHandler:\n        self._statistics_subscriber = StatisticsHandler()\n        self._rsocket.request_channel(Payload(metadata=composite(\n            route('statistics')\n        )), publisher=self._statistics_subscriber).subscribe(self._statistics_subscriber)\n        return self._statistics_subscriber\n\n    def stop_listening_for_statistics(self):\n        self._statistics_subscriber.cancel()\n")),(0,r.kt)("p",null,"Finally, let's try out this new functionality in the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"async def statistics_example(user1):\n    await user1.send_statistics()\n\n    statistics_control = user1.listen_for_statistics()\n\n    await asyncio.sleep(5)\n\n    statistics_control.set_requested_statistics(['users'])\n\n    await asyncio.sleep(5)\n\n    user1.stop_listening_for_statistics()\n")),(0,r.kt)("p",null,"Call this new method from the client ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," method."))}p.isMDXComponent=!0}}]);