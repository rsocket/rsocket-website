"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),i=["components"],o={slug:"/guides/rsocket-py/tutorial/base",title:"Getting started",sidebar_label:"Getting started"},l=void 0,p={unversionedId:"guides/rsocket-py/tutorial/base",id:"guides/rsocket-py/tutorial/base",title:"Getting started",description:"Application structure",source:"@site/content-docs/guides/rsocket-py/tutorial/00-base.mdx",sourceDirName:"guides/rsocket-py/tutorial",slug:"/guides/rsocket-py/tutorial/base",permalink:"/guides/rsocket-py/tutorial/base",draft:!1,editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/tutorial/00-base.mdx",tags:[],version:"current",lastUpdatedBy:"jell-o-fishi",lastUpdatedAt:1672781500,formattedLastUpdatedAt:"Jan 3, 2023",sidebarPosition:0,frontMatter:{slug:"/guides/rsocket-py/tutorial/base",title:"Getting started",sidebar_label:"Getting started"},sidebar:"guides",previous:{title:"Preface",permalink:"/guides/rsocket-py/tutorial"},next:{title:"Request routing",permalink:"/guides/rsocket-py/tutorial/request_routing"}},c={},u=[{value:"Application structure",id:"application-structure",level:2},{value:"Server side",id:"server-side",level:2},{value:"Client side",id:"client-side",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"application-structure"},"Application structure"),(0,s.kt)("p",null,"In this step we will set up a minimal code required for both the server and the client."),(0,s.kt)("p",null,"The application will be composed of 3 modules:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("b",null,"shared.py")," - code shared between client and server"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("b",null,"server.py")," - server side"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("b",null,"client.py")," - client side and example usage")),(0,s.kt)("p",null,"We will start with ",(0,s.kt)("b",null,"server.py")," and ",(0,s.kt)("b",null,"client.py"),". ",(0,s.kt)("b",null,"shared.py")," will be empty for now."),(0,s.kt)("p",null,"See resulting code on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/rsocket/rsocket-py/tree/master/examples/tutorial/step0"},"GitHub")),(0,s.kt)("h2",{id:"server-side"},"Server side"),(0,s.kt)("p",null,"We will set up a simple server to accept connections and respond to the client sending the user's name.\nThe server will listen on TCP port 6565."),(0,s.kt)("p",null,"Below is the code for the ",(0,s.kt)("b",null,"server.py")," module:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"import asyncio\nimport logging\n\nfrom rsocket.frame_helpers import ensure_bytes\nfrom rsocket.helpers import create_future, utf8_decode\nfrom rsocket.local_typing import Awaitable\nfrom rsocket.payload import Payload\nfrom rsocket.request_handler import BaseRequestHandler\nfrom rsocket.rsocket_server import RSocketServer\nfrom rsocket.transports.tcp import TransportTCP\n\nclass Handler(BaseRequestHandler):\n    async def request_response(self, payload: Payload) -> Awaitable[Payload]:\n        username = utf8_decode(payload.data)\n        return create_future(Payload(ensure_bytes(f'Welcome to chat, {username}')))\n\nasync def run_server():\n    def session(*connection):\n        RSocketServer(TransportTCP(*connection), handler_factory=Handler)\n\n    async with await asyncio.start_server(session, 'localhost', 6565) as server:\n        await server.serve_forever()\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    asyncio.run(run_server())\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Lines 21-22")," start a TCP server listening on localhost:6565 using ",(0,s.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio-stream.html"},"asyncio"),"."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Lines 18-19")," define that the response to this session will be instantiating an ",(0,s.kt)("inlineCode",{parentName:"p"},"RSocketServer"),"."),(0,s.kt)("p",null,"The 2 parameters passed are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"transport : An instance of a supported connection method. In this case it is an adapter over the TCP connection."),(0,s.kt)("li",{parentName:"ul"},"handler_factory: A callable which returns an ",(0,s.kt)("inlineCode",{parentName:"li"},"RSocketHandler")," instance. This will be used to respond to the client's requests.")),(0,s.kt)("p",null,"There is no need to specify anything else here since the ",(0,s.kt)("inlineCode",{parentName:"p"},"RSocketServer")," starts internal\ntasks which listen for requests, and responds accordingly. The session will close when the connection is lost."),(0,s.kt)("p",null,"In the example, the handler factory (",(0,s.kt)("em",{parentName:"p"},"Line 12"),") is a subclass of ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseRequestHandler"),". In this class, we can implement any of the methods\nwhich handle the 4 RSocket request types:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"request_response")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"request_stream")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"request_channel")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"fire_and_forget"))),(0,s.kt)("p",null,"Check the ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseRequestHandler")," for other methods which can be implemented."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Lines 13-15")," implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"request_response")," handler, which welcomes the user."),(0,s.kt)("p",null,"The username is taken from the ",(0,s.kt)("inlineCode",{parentName:"p"},"data")," property of the ",(0,s.kt)("inlineCode",{parentName:"p"},"Payload"),", and a response is created using helper methods:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"create_future")," : This creates a future which contains the response data."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ensure_bytes")," : All values in a response must be either bytes or bytearrays. This method encodes string to bytes and assumes utf-8 for the input.")),(0,s.kt)("p",null,"Next we will look at a simple client which connects to this server."),(0,s.kt)("h2",{id:"client-side"},"Client side"),(0,s.kt)("p",null,"The client will connect to the server, send a single ",(0,s.kt)("em",{parentName:"p"},"response")," request and disconnect."),(0,s.kt)("p",null,"Below is the code for the ",(0,s.kt)("b",null,"client.py")," module:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"import asyncio\nimport logging\n\nfrom rsocket.helpers import single_transport_provider, utf8_decode\nfrom rsocket.payload import Payload\nfrom rsocket.rsocket_client import RSocketClient\nfrom rsocket.transports.tcp import TransportTCP\n\nasync def main():\n    connection = await asyncio.open_connection('localhost', 6565)\n\n    async with RSocketClient(single_transport_provider(TransportTCP(*connection))) as client:\n        response = await client.request_response(Payload(data=b'George'))\n\n        print(f\"Server response: {utf8_decode(response.data)}\")\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    asyncio.run(main())\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Line 12")," instantiates an ",(0,s.kt)("inlineCode",{parentName:"p"},"RSocketClient"),", and ",(0,s.kt)("em",{parentName:"p"},"line 13")," sends the request."),(0,s.kt)("p",null,"The response is a ",(0,s.kt)("inlineCode",{parentName:"p"},"Payload")," instance, the ",(0,s.kt)("inlineCode",{parentName:"p"},"data")," of which is printed (",(0,s.kt)("em",{parentName:"p"},"Line 15"),")."))}m.isMDXComponent=!0}}]);