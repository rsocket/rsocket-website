"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[254],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,y=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9180:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>c,metadata:()=>p,toc:()=>l,default:()=>u});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={slug:"/guides/rsocket-py/rxpy",title:"RxPy integration",sidebar_label:"Introduction"},c=void 0,p={unversionedId:"guides/rsocket-py/rxpy/introduction",id:"guides/rsocket-py/rxpy/introduction",isDocsHomePage:!1,title:"RxPy integration",description:"Reactive Streams",source:"@site/content-docs/guides/rsocket-py/rxpy/introduction.mdx",sourceDirName:"guides/rsocket-py/rxpy",slug:"/guides/rsocket-py/rxpy",permalink:"/guides/rsocket-py/rxpy",editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/rxpy/introduction.mdx",tags:[],version:"current",lastUpdatedBy:"Kevin Viglucci",lastUpdatedAt:1647191182,formattedLastUpdatedAt:"3/13/2022",frontMatter:{slug:"/guides/rsocket-py/rxpy",title:"RxPy integration",sidebar_label:"Introduction"},sidebar:"docs",previous:{title:"WebSocket Server",permalink:"/guides/rsocket-py/server/rsocket-websocket-server"}},l=[{value:"Reactive Streams",id:"reactive-streams",children:[]},{value:"Getting started",id:"getting-started",children:[]},{value:"Examples",id:"examples",children:[{value:"Request Response",id:"request-response",children:[]},{value:"Request Stream",id:"request-stream",children:[]},{value:"Request Channel",id:"request-channel",children:[]}]}],d={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"reactive-streams"},"Reactive Streams"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"rsocket-py")," implementation doesn't use ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/Rx/"},"RxPy")," by default. A wrapper class ",(0,o.kt)("inlineCode",{parentName:"p"},"RxRSocketClient"),"\ncan be used to interact with ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/Rx/"},"RxPy")," (>= 3.2.0) entities (",(0,o.kt)("inlineCode",{parentName:"p"},"Observable"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Observer"),")"),(0,o.kt)("h2",{id:"getting-started"},"Getting started"),(0,o.kt)("p",null,"To use Rx with the rsocket client instantiate an RxRSocket with an existing client or server instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.rx_support.rx_rsocket import RxRSocket\n\nimport asyncio\nfrom rsocket.rsocket_client import RSocketClient\nfrom rsocket.transports.tcp import TransportTCP\n\nasync def main():\n    connection = await asyncio.open_connection('localhost', 6565)\n\n    async with RSocketClient(TransportTCP(*connection)) as client:\n        rx_client = RxRSocket(client)\n        ... # Execute requests\n\nif __name__ == '__main__':\n    asyncio.run(main())\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"RxRSocket can be used as a context manager with a client which is not yet connected. It will close the underlying client\nwhen exiting the context. Example code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.rx_support.rx_rsocket import RxRSocket\n\nimport asyncio\nfrom rsocket.rsocket_client import RSocketClient\nfrom rsocket.transports.tcp import TransportTCP\n\nasync def main():\n    connection = await asyncio.open_connection('localhost', 6565)\n    client = RSocketClient(TransportTCP(*connection))\n\n    async with RxRSocket(client) as rx_client:\n        ... # Execute requests\n\nif __name__ == '__main__':\n    asyncio.run(main())\n")),(0,o.kt)("h3",{id:"request-response"},"Request Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.payload import Payload\nfrom rx import operators\n\nreceived_message = await rx_client.request_response(\n    Payload(b'request text')\n).pipe(\n    operators.map(lambda payload: payload.data),\n    operators.single()\n)\n")),(0,o.kt)("h3",{id:"request-stream"},"Request Stream"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.payload import Payload\nfrom rx import operators\n\nreceived_messages = await rx_client.request_stream(\n    Payload(b'request text'),\n    request_limit=2\n).pipe(\n    operators.map(lambda payload: payload.data),\n    operators.to_list()\n)\n")),(0,o.kt)("h3",{id:"request-channel"},"Request Channel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from rsocket.payload import Payload\nimport rx\nfrom rx import operators\n\nsent_payloads = [Payload(data) for data in [b'1', b'2', b'3']]\n\nreceived_messages = await rx_client.request_channel(\n    Payload(b'request text'),\n    observable=rx.from_list(sent_payloads),\n    request_limit=2\n).pipe(\n    operators.map(lambda payload: payload.data),\n    operators.to_list()\n)\n")))}u.isMDXComponent=!0}}]);