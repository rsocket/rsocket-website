"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[473],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(r),k=o,m=d["".concat(i,".").concat(k)]||d[k]||u[k]||a;return r?n.createElement(m,s(s({ref:t},l),{},{components:r})):n.createElement(m,s({ref:t},l))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,s[1]=p;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2149:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>p,contentTitle:()=>i,metadata:()=>c,toc:()=>l,default:()=>d});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),s=["components"],p={slug:"/guides/rsocket-py/server/rsocket-websocket-server",title:"RSocketServer (Websocket Transport) - rsocket-py",sidebar_label:"WebSocket Server"},i=void 0,c={unversionedId:"guides/rsocket-py/server/rsocket-websocket-server",id:"guides/rsocket-py/server/rsocket-websocket-server",isDocsHomePage:!1,title:"RSocketServer (Websocket Transport) - rsocket-py",description:"Getting Started",source:"@site/content-docs/guides/rsocket-py/server/rsocket-websocket-server.mdx",sourceDirName:"guides/rsocket-py/server",slug:"/guides/rsocket-py/server/rsocket-websocket-server",permalink:"/guides/rsocket-py/server/rsocket-websocket-server",editUrl:"https://github.com/rsocket/rsocket-website/edit/master/content-docs/guides/rsocket-py/server/rsocket-websocket-server.mdx",tags:[],version:"current",lastUpdatedBy:"Kevin Viglucci",lastUpdatedAt:1647909529,formattedLastUpdatedAt:"3/22/2022",frontMatter:{slug:"/guides/rsocket-py/server/rsocket-websocket-server",title:"RSocketServer (Websocket Transport) - rsocket-py",sidebar_label:"WebSocket Server"},sidebar:"docs",previous:{title:"TCP Server",permalink:"/guides/rsocket-py/server/rsocket-tcp-server"},next:{title:"Introduction",permalink:"/guides/rsocket-py/rxpy"}},l=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Examples",id:"examples",children:[]}],u={toc:l};function d(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"rsocket-py")," supports multiple transport protocols. The Websocket transport is available by installing rsocket using one\nof the extra features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"pip3 install rsocket","[aiohttp]"),(0,a.kt)("li",{parentName:"ul"},"pip3 install rsocket","[quart]")),(0,a.kt)("p",null,"In order to use a Websocket transport, instantiate a ",(0,a.kt)("inlineCode",{parentName:"p"},"TransportAioHttpWebsocket")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"TransportQuartWebsocket"),"\nand pass it to an ",(0,a.kt)("inlineCode",{parentName:"p"},"RSocketServer")," instance. There are a few helpers to ease the creation of a server or a client."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Example using ",(0,a.kt)("inlineCode",{parentName:"p"},"aiohttp"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"import logging\nimport sys\nfrom asyncio import Future\n\nfrom aiohttp import web\n\nfrom rsocket.helpers import create_future\nfrom rsocket.payload import Payload\nfrom rsocket.request_handler import BaseRequestHandler\nfrom rsocket.transports.aiohttp_websocket import websocket_handler_factory\n\n\nclass Handler(BaseRequestHandler):\n\n    async def request_response(self, payload: Payload) -> Future:\n        return create_future(Payload(b'pong'))\n\n\nif __name__ == '__main__':\n    port = sys.argv[1] if len(sys.argv) > 1 else 6565\n    logging.basicConfig(level=logging.DEBUG)\n    app = web.Application()\n    app.add_routes([web.get('/', websocket_handler_factory(handler_factory=Handler))])\n    web.run_app(app, port=port)\n")),(0,a.kt)("p",null,"Example using ",(0,a.kt)("inlineCode",{parentName:"p"},"quart"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'import logging\nimport sys\nfrom asyncio import Future\n\nfrom quart import Quart\n\nfrom rsocket.helpers import create_future\nfrom rsocket.payload import Payload\nfrom rsocket.request_handler import BaseRequestHandler\nfrom rsocket.transports.quart_websocket import websocket_handler\n\napp = Quart(__name__)\n\n\nclass Handler(BaseRequestHandler):\n\n    async def request_response(self, payload: Payload) -> Future:\n        return create_future(Payload(b\'pong\'))\n\n\n@app.websocket("/")\nasync def ws():\n    await websocket_handler(handler_factory=Handler)\n\n\nif __name__ == "__main__":\n    port = sys.argv[1] if len(sys.argv) > 1 else 6565\n    logging.basicConfig(level=logging.DEBUG)\n    app.run(port=port)\n')))}d.isMDXComponent=!0}}]);